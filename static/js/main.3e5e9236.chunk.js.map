{"version":3,"sources":["screens/MainScreen/styles.js","screens/MainScreen/index.js","screens/SignupScreen/styles.js","screens/SignupScreen/index.js","theme.js","components/ScrollToTop/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","themeGet","Title","Subtitle","Button","ButtonContainer","MainScreen","to","SignupScreen","theme","colors","background","primary","secondary","tertiary","gold","silver","beige","maroon","lightGold","ScrollToTop","prevProps","this","props","location","pathname","search","window","scrollTo","children","Component","withRouter","App","basename","forceRefresh","onUpdate","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2rCAGO,IAAMA,EAAYC,IAAOC,IAAV,IAKAC,YAAS,sBAOlBC,EAAQH,IAAOC,IAAV,IAGPC,YAAS,qBAIPE,EAAWJ,IAAOC,IAAV,IAGVC,YAAS,qBAIPG,EAASL,IAAOC,IAAV,IAGRC,YAAS,kBAKPI,EAAkBN,IAAOC,IAAV,K,QCpBbM,EAbI,kBACjB,kBAACR,EAAD,KACE,kBAACI,EAAD,oCACA,kBAACC,EAAD,oCACA,kBAACE,EAAD,KACE,kBAACD,EAAD,gBACA,kBAAC,IAAD,CAAMG,GAAG,WACP,kBAACH,EAAD,oB,wSCRD,IAAMN,EAAYC,IAAOC,IAAV,IAKAC,YAAS,sBCHhBO,EAFM,kBAAM,kBAAC,EAAD,O,OCWZC,EAdD,CACZC,OAAQ,CACNC,WAAY,UACZC,QAAS,UACTC,UAAW,UACXC,SAAU,UACVC,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPC,OAAQ,UACRC,UAAW,Y,gCCPTC,E,iLACeC,GAEfC,KAAKC,MAAMC,SAASC,WAAaJ,EAAUG,SAASC,UACpDH,KAAKC,MAAMC,SAASE,SAAWL,EAAUG,SAASE,QAElDC,OAAOC,SAAS,EAAG,K,+BAKrB,OAAON,KAAKC,MAAMM,a,GAXIC,aAeXC,cAAWX,GCKXY,MAff,WACE,OACE,kBAAC,IAAD,CAAevB,MAAOA,GACpB,kBAAC,IAAD,CAAQwB,SAAS,IAAIC,cAAY,EAACC,SAAU,kBAAMR,OAAOC,SAAS,EAAG,KACnE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,UAAUC,UAAW9B,SCH/B+B,QACW,cAA7BZ,OAAOH,SAASgB,UAEe,UAA7Bb,OAAOH,SAASgB,UAEhBb,OAAOH,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e5e9236.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { themeGet } from \"@styled-system/theme-get\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  flex: 1;\n  min-height: 100vh;\n  background-color: ${themeGet(\"colors.background\")};\n  align-items: center;\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n`;\n\nexport const Title = styled.div`\n  text-align: center;\n  font-size: 4em;\n  color: ${themeGet(\"colors.lightGold\")};\n  font-family: sans-serif;\n`;\n\nexport const Subtitle = styled.div`\n  text-align: center;\n  font-size: 2em;\n  color: ${themeGet(\"colors.lightGold\")};\n  font-family: sans-serif;\n`;\n\nexport const Button = styled.div`\n  text-align: center;\n  font-size: 1.5em;\n  color: ${themeGet(\"colors.silver\")};\n  font-family: sans-serif;\n  margin: 20px;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-flow: row nowrap;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import React from \"react\";\nimport { Container, Title, Subtitle, Button, ButtonContainer } from \"./styles\";\nimport { Link } from \"react-router-dom\";\n\nconst MainScreen = () => (\n  <Container>\n    <Title>Welcome to Corona Is Blind!</Title>\n    <Subtitle>We are currently in Week 3!</Subtitle>\n    <ButtonContainer>\n      <Button>Sign In</Button>\n      <Link to=\"/signup\">\n        <Button>Sign Up</Button>\n      </Link>\n    </ButtonContainer>\n  </Container>\n);\n\nexport default MainScreen;\n","import styled from \"styled-components\";\nimport { themeGet } from \"@styled-system/theme-get\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  flex: 1;\n  min-height: 100vh;\n  background-color: ${themeGet(\"colors.background\")};\n  align-items: center;\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n`;\n","import React from \"react\";\nimport { Container } from \"./styles\";\n\nconst SignupScreen = () => <Container></Container>;\n\nexport default SignupScreen;\n","const theme = {\n  colors: {\n    background: \"#120B3F\",\n    primary: \"#120B3F\",\n    secondary: \"#5C0E73\",\n    tertiary: \"#37096C\",\n    gold: \"#EDBF2B\",\n    silver: \"#E5DEFF\",\n    beige: \"#E8CF8C\",\n    maroon: \"#7E6E23\",\n    lightGold: \"#B2AB99\"\n  }\n};\n\nexport default theme;\n","import { Component } from \"react\";\nimport { withRouter } from \"react-router\";\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.location.pathname !== prevProps.location.pathname ||\n      this.props.location.search !== prevProps.location.search\n    ) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from \"react\";\nimport MainScreen from \"./screens/MainScreen\";\nimport SignupScreen from \"./screens/SignupScreen\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"./theme\";\nimport ScrollToTop from \"./components/ScrollToTop\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router basename=\"/\" forceRefresh onUpdate={() => window.scrollTo(0, 0)}>\n        <ScrollToTop>\n          <Switch>\n            <Route exact path=\"/\" component={MainScreen} />\n            <Route exact path=\"/signup\" component={SignupScreen} />\n          </Switch>\n        </ScrollToTop>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}